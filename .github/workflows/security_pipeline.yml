name: Node.js DevSecOps Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./my-vulnerable-app # All commands will run from here unless specified

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16' # Match the Dockerfile or your preference

    - name: Install dependencies
      run: npm install

    # --- SAST Scan (Semgrep) ---
    - name: Run Semgrep SAST Scan
      id: semgrep_scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/javascript
        # Additional configs you can use (uncomment as needed):
        # config: |
        #   p/javascript
        #   p/node
        #   p/express
        #   p/security-audit
        #   p/owasp-top-10
        #   auto
        # generateSarif: true # For SARIF output

    - name: Fail build if Semgrep found critical issues (Security Gate)
      # Semgrep action automatically fails if critical issues are found,
      # but we can add an explicit check if needed for custom rules or specific thresholds.
      # For simplicity, we rely on Semgrep's default exit codes.
      run: |
        echo "Semgrep scan completed. Review results in the 'semgrep_scan' step summary."
        # If semgrep_scan step fails due to rule violations, this job will fail.

    # --- SCA & Container Scanning (Trivy) ---
    - name: Build Docker image
      run: docker build -t my-vulnerable-app:latest .

    - name: Run Trivy Container Image Scan (Vulnerabilities)
      run: |
        trivy image --exit-code 1 --severity HIGH,CRITICAL --format table my-vulnerable-app:latest
      # --exit-code 1 makes the job fail if HIGH/CRITICAL issues are found. This is your security gate.

    - name: Run Trivy FS (Filesystem) Scan for Dependencies (SCA)
      run: |
        trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table --vuln-type library .
      # Scans the local filesystem where node_modules are installed.
      # --exit-code 1 makes the job fail if HIGH/CRITICAL issues are found.

    # --- Artifact Upload (Optional but good for review) ---
    - name: Upload Semgrep Results (SARIF)
      if: always() # Always run this step even if previous steps fail
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: ${{steps.semgrep_scan.outputs.sarifFilePath}} # Path generated by semgrep-action

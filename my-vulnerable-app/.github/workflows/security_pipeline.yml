name: Node.js DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./my-vulnerable-app # All commands will run from here unless specified

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    # --- TEST FILE CREATION AND UPLOAD (CRITICAL DEBUGGING STEP) ---
    # This step will confirm if artifact upload works at all in your environment.
    - name: Create Test File
      run: echo "This is a test file to confirm artifact upload works." > test_file_for_upload_check.txt

    - name: Upload Test File
      uses: actions/upload-artifact@v4
      with:
        name: test-artifact-check
        path: ./test_file_for_upload_check.txt # This MUST succeed if the directory is writable and the action works.

    # --- SAST Scan (Semgrep) - USING DIRECT CLI ---
    # This is the section that HAS to be active, not the 'returntocorp/semgrep-action' wrapper.
    - name: Install Semgrep CLI
      run: |
        python3 -m pip install semgrep
        semgrep --version # Verify installation

    - name: Run Semgrep SAST Scan (Direct CLI)
      # This command explicitly creates semgrep.sarif in the current working directory.
      run: |
        semgrep --config=p/javascript --sarif --output semgrep.sarif .
      # The '.' scans the current directory.
      # This step will fail the job if Semgrep finds HIGH/CRITICAL issues.

    - name: Fail build if Semgrep found critical issues (Security Gate Confirmation)
      run: |
        echo "Semgrep scan completed. Review results in the downloaded artifacts if available."

    # --- DEBUG STEP: List files in the working directory (ABSOLUTELY CRITICAL OUTPUT) ---
    - name: Debug - List files in current directory
      run: ls -la

    # --- SCA & Container Scanning (Trivy) ---
    - name: Build Docker image
      run: docker build -t my-vulnerable-app:latest .

    - name: Run Trivy Container Image Scan (Vulnerabilities)
      run: |
        trivy image --exit-code 1 --severity HIGH,CRITICAL --format table my-vulnerable-app:latest

    - name: Run Trivy FS (Filesystem) Scan for Dependencies (SCA)
      run: |
        trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table --vuln-type library .

    # --- Artifact Upload for Semgrep Results ---
    - name: Upload Semgrep SARIF Results
      if: always() # Always run this step even if previous steps fail
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-sarif-results
        path: ./semgrep.sarif # This path points to the file explicitly created by the direct CLI command
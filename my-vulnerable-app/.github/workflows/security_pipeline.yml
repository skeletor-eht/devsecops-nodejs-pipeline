name: Node.js DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./my-vulnerable-app # All commands will run from here unless specified

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    # --- SAST Scan (Semgrep) ---
    # Install Semgrep CLI directly to control its output
    - name: Install Semgrep CLI
      run: |
        python3 -m pip install semgrep
        # Verify installation
        semgrep --version

    # Run Semgrep CLI and explicitly output SARIF to a file
    - name: Run Semgrep SAST Scan (Direct CLI)
      # We ensure this command explicitly creates semgrep.sarif
      run: |
        semgrep --config=p/javascript --sarif --output semgrep.sarif .
      # The '.' at the end tells Semgrep to scan the current directory.
      # If the step fails, `semgrep` exits with a non-zero code, failing the job.

    - name: Fail build if Semgrep found critical issues (Security Gate)
      # This step primarily confirms completion, as direct semgrep CLI exit code handles failure.
      run: |
        echo "Semgrep scan completed. Review results in the downloaded artifacts."

    # --- DEBUG STEP: List files in the working directory (Crucial for verification) ---
    - name: Debug - List files in current directory
      run: ls -la

    # --- SCA & Container Scanning (Trivy) ---
    - name: Build Docker image
      run: docker build -t my-vulnerable-app:latest .

    - name: Run Trivy Container Image Scan (Vulnerabilities)
      run: |
        trivy image --exit-code 1 --severity HIGH,CRITICAL --format table my-vulnerable-app:latest

    - name: Run Trivy FS (Filesystem) Scan for Dependencies (SCA)
      run: |
        trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table --vuln-type library .

    # --- Artifact Upload ---
    - name: Upload Semgrep SARIF Results
      if: always() # Always run this step even if previous steps fail
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-sarif-results
        # This path now points to the file we explicitly created with the direct CLI command
        path: ./semgrep.sarif